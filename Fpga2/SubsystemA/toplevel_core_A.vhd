-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity toplevel_core_A is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_out_a_0_V : OUT STD_LOGIC_VECTOR (71 downto 0);
    i_in_port_model_of_bc_V : IN STD_LOGIC_VECTOR (71 downto 0);
    i_out_port_model_to_b_V : OUT STD_LOGIC_VECTOR (71 downto 0) );
end;


architecture behav of toplevel_core_A is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "toplevel_core_A,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcvu9p-flga2104-2L-e,HLS_INPUT_CLOCK=70.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.455875,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=9,HLS_SYN_FF=11,HLS_SYN_LUT=209,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv71_2DC6C0000000000000 : STD_LOGIC_VECTOR (70 downto 0) := "01011011100011011000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv72_2DC6C0000000000000 : STD_LOGIC_VECTOR (71 downto 0) := "001011011100011011000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv109_1057D9D428 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000001010111110110011101010000101000";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_6C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal b_components_V_0 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000";
    signal p_Val2_s_fu_77_p1 : STD_LOGIC_VECTOR (71 downto 0);
    signal add_ln703_fu_81_p2 : STD_LOGIC_VECTOR (71 downto 0);
    signal r_V_fu_91_p0 : STD_LOGIC_VECTOR (71 downto 0);
    signal r_V_fu_91_p2 : STD_LOGIC_VECTOR (108 downto 0);
    signal tmp_1_fu_97_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_2_fu_111_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln415_fu_119_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln713_fu_107_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_2_fu_123_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                b_components_V_0(54) <= '1';
    b_components_V_0(55) <= '1';
    b_components_V_0(57) <= '1';
    b_components_V_0(58) <= '1';
    b_components_V_0(62) <= '1';
    b_components_V_0(63) <= '1';
    b_components_V_0(64) <= '1';
    b_components_V_0(66) <= '1';
    b_components_V_0(67) <= '1';
    b_components_V_0(69) <= '1';
            end if;
        end if;
    end process;
    b_components_V_0(53 downto 0) <= "000000000000000000000000000000000000000000000000000000";
    b_components_V_0(56 downto 56) <= "0";
    b_components_V_0(61 downto 59) <= "000";
    b_components_V_0(65 downto 65) <= "0";
    b_components_V_0(68 downto 68) <= "0";
    b_components_V_0(70) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln703_fu_81_p2 <= std_logic_vector(unsigned(i_in_port_model_of_bc_V) + unsigned(p_Val2_s_fu_77_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_out_port_model_to_b_V <= ap_const_lv72_2DC6C0000000000000;
    p_Val2_2_fu_123_p2 <= std_logic_vector(unsigned(zext_ln415_fu_119_p1) + unsigned(sext_ln713_fu_107_p1));
    p_Val2_s_fu_77_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_components_V_0),72));
    r_V_fu_91_p0 <= add_ln703_fu_81_p2;
    r_V_fu_91_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_fu_91_p0) * signed('0' &ap_const_lv109_1057D9D428))), 109));
        sext_ln713_fu_107_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_97_p4),64));

    tmp_1_fu_97_p4 <= r_V_fu_91_p2(108 downto 46);
    tmp_2_fu_111_p3 <= r_V_fu_91_p2(45 downto 45);
        x_out_a_0_V <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_2_fu_123_p2),72));

    zext_ln415_fu_119_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_111_p3),64));
end behav;
